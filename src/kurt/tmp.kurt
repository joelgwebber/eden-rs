(def :Wall {
    :-adj [
        {dx:-1 dy: 0 bit:8}
        {dx: 1 dy: 0 bit:4}
        {dx: 0 dy:-1 bit:2}
        {dx: 0 dy: 1 bit:1}
    ]

    :-tiles [
        [3 2]  -- 0000
        [1 2]  -- 0001
        [2 3]  -- 0010
        [0 2]  -- 0011
        [2 1]  -- 0100
        [0 0]  -- 0101
        [0 3]  -- 0110
        [0 1]  -- 0111
        [1 1]  -- 1000
        [3 0]  -- 1001
        [3 3]  -- 1010
        [3 1]  -- 1011
        [2 0]  -- 1100
        [2 2]  -- 1101
        [1 3]  -- 1110
        [1 0]  -- 1111
    ]

    :make (height imgs | Entity:make [
        (Located:make)
        ({height} Solid:make)
        (Rendered:make imgs:0)
        {wall: {^:-impl imgs}}
    ])

    :-impl {
        :update (ent | ent:set :rendered {
            :image (@:imgs (
                apply + [
                    map -adj (entry | {
                        :x [+ ent:loc:x entry:dx]
                        :y [+ ent:loc:y entry:dy]
                    }
                    (if (!= nil (ent:chunk:top-with x y :wall)) entry:bit 0)
                    )
                ]
            ))
        })
    }
})

(def :StoneWall {
    -imgs: (map Wall:-tiles (tile |
        Rendered:image "blocks/wall-stone.png" {
            x: (* tile:0 16)
            y: (* tile:1 48)
            w:16 h:48 ay:32
        }
    ))

    make: (Wall:make 2 -imgs)
})

(def :Bar {
    -imgs: (map Wall:-tiles (tile |
        Rendered:image "blocks/bar.png" {
            x: [* [/tile 0] 16]
            y: [* [/tile 1] 32]
            w:16 h:32 ay:16
        }
    ))

    make: (Wall:make 1 -imgs)
})
