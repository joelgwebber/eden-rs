(do
    (test "primitive types" (| do
        (expect 42 42)
        (expect false false)
        (expect "foo" "foo")
        (expect ["foo" "bar"] ["foo" "bar"])
        (expect {:foo 42 :bar 54} {:foo 42 :bar 54})
    ))

    (test "def, set, get" (| do
        (let { :foo 42 }
            (| do
                (expect 42 foo)
                (set :foo 54)
                (expect 54 foo)
            )
        )

        (def :foo 42)
        (expect 42 foo)
        (set :foo 54)
        (expect 54 foo)
    ))

    (test "dynamic dict keys" (| do
        (def :dyn-sym :foo)
        (def :get-sym (| :bar))
        (def :things {
            dyn-sym "foo"
            (get-sym) "bar"
        })
        (expect "foo" (things :foo))
        (expect "bar" (things :bar))
        (expect "bar" things.bar)
    ))

    (test "list access" (| do
        (def :list ["foo" "bar" "baz"])
        (expect "foo" (list 0))
        (expect "bar" (list 1))
        (expect "baz" (list 2))
        (expect "baz" list.2)
    ))

    (test "shorthand access" (| do
        (def :list [42 54 69])
        (def :idx 2)
        (expect 54 list.1)
        (expect 69 list.(idx))
        (expect 69 (list idx))

        (def :fn (| {:foo {:bar 42}}))
        (expect 42 (fn).foo.bar)

        (def :toto :foo)
        (def :tintin :bar)
        (expect 42 (fn).(toto).(tintin))
    ))

    (test "close over outer" (| do
        (def :outer 54)
        (let
            { :foo 42 }
            (| expect 96 (+ foo outer))
        )
    ))

    (test "set/def-all" (| do
        (def-all {:a 42 :b 54})
        (expect 42 a)
        (expect 54 b)
        (set-all {:a 54 :b 42})
        (expect 54 a)
        (expect 42 b)
    ))

    (test "exists" (| do
        (def :a "a")
        (expect true (? :a))
        (expect false (? :not-a-thing))
    ))

    (test "no-arg block" (| do
        (def :fn (| 42))
        (expect 42 (fn))
    ))

    (test "single-arg block" (| do
        (def :fn2 (x | + x 42))
        (expect 44 (fn2 2))
    ))

    (test "close over var" (| do
        (def :outer 42)
        (def :fn3 (x | + x outer))
        (expect 44 (fn3 2))
    ))

    (test "panic" (| do
        (def :caught false)
        (def :func (blah |
            (try
                (| not-a-thing)
                (e | do
                    (set :caught true)
                )
            )
        ))
        (func 42)
        (expect true caught)
    ))

    (test "macro-ish things" (| do
        -- TODO: Make ellipsis args work.
        (def :infix (l | (l.1 l.0 l.2)))
        (expect 42 ((infix [40 + 2])))

        -- TODO: More separate tests for [un]quoting.
        (expect :(a 42) :(a \(+ 40 2)))

        -- TODO:
        -- apply component access
        -- block component access
    ))
)
