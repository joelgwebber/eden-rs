(do [
    -- Primitive types.
    (expect 42 42)
    (expect false false)
    (expect "foo" "foo")
    (expect ["foo" "bar"] ["foo" "bar"])
    (expect {:foo 42 :bar 54} {:foo 42 :bar 54})

    -- def, set, get.
    (let { :foo 42 }
        (| do [
            (expect 42 foo)
            (set :foo 54)
            (expect 54 foo)
        ])
    )

    (def :foo 42)
    (expect 42 foo)
    (set :foo 54)
    (expect 54 foo)

    -- dynamic dict keys
    (def :dyn-sym :foo)
    (def :get-sym (| :bar))
    (def :things {
        dyn-sym "foo"
        (get-sym) "bar"
    })
    (expect "foo" (things :foo))
    (expect "bar" (things :bar))
    (expect "bar" things.bar)

    (def :list ["foo" "bar" "baz"])
    (expect "foo" (list 0))
    (expect "bar" (list 1))
    (expect "baz" (list 2))
    (expect "baz" list.2)    -- TODO: shorthand access

    -- TODO: cross-referenced keys/vals in a single (def)

    (def :outer 54)
    (let
        { :foo 42 }
        (| expect 96 (+ [foo outer]))
    )
])
