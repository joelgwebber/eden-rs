(do
    -- Primitive types.
    (expect 42 42)
    (expect false false)
    (expect "foo" "foo")
    (expect ["foo" "bar"] ["foo" "bar"])
    (expect {:foo 42 :bar 54} {:foo 42 :bar 54})

    -- def, set, get.
    (let { :foo 42 }
        (| do
            (expect 42 foo)
            (set :foo 54)
            (expect 54 foo)
        )
    )

    (def :foo 42)
    (expect 42 foo)
    (set :foo 54)
    (expect 54 foo)

    -- dynamic dict keys
    (def :dyn-sym :foo)
    (def :get-sym (| :bar))
    (def :things {
        dyn-sym "foo"
        (get-sym) "bar"
    })
    (expect "foo" (things :foo))
    (expect "bar" (things :bar))
    (expect "bar" things.bar)

    (def :list ["foo" "bar" "baz"])
    (expect "foo" (list 0))
    (expect "bar" (list 1))
    (expect "baz" (list 2))
    (expect "baz" list.2)

    -- various shorthand access cases
    (def :list [42 54 69])
    (def :idx 2)
    (expect 54 list.1)
    (expect 69 list.(idx))
    (expect 69 (list idx))

    (def :fn (| {:foo {:bar 42}}))
    (expect 42 (fn).foo.bar)

    (def :toto :foo)
    (def :tintin :bar)
    (expect 42 (fn).(toto).(tintin))

    -- close over outer
    (def :outer 54)
    (let
        { :foo 42 }
        (| expect 96 (+ foo outer))
    )

    -- set/def-all
    (def-all {:a 42 :b 54})
    (expect 42 a)
    (expect 54 b)
    (set-all {:a 54 :b 42})
    (expect 54 a)
    (expect 42 b)
)
